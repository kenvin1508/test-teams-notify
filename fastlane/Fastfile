# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

APP_ID_PRO = "1:980805347240:android:0bb014a0ab3e3056995f9d"
APP_ID_DEV = "1:980805347240:android:e31ec3d5d3dffb14995f9d"

CREDENTIALS_PATH = "fastlane/test-teams-notify-0525b6b984ca.json"
RELEASE_NOTE_DEV_PATH = "fastlane/release_note_dev.txt"
RELEASE_NOTE_PRO_PATH = "fastlane/release_note_pro.txt"

WEB_HOOK_TEAMS_URL = "https://studentptithcmeduvn.webhook.office.com/webhookb2/c7197ed2-8a1f-4356-9597-b160382b75ea@ae2be1e4-132e-4e59-b21f-eb7e27b3b606/IncomingWebhook/d3ac33a6b3804f1d9c50ad5a12618529/d28a8af4-9749-4b3c-a687-c28287c900f2"

ANDROID_ARTIFACT_TYPE = "APK"
ANDROID_ARTIFACT_PATH = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
TESTER_GROUP = "tester"

NEW_RELEASE_NOTE_PATH = ""
NEW_VERSION_CODE = 1
NEW_VERSION_NAME = ""

LATEST_RELEASE_NOTE = ""
LATEST_VERSION_CODE = ""
LATEST_VERSION_NAME = ""

before_all do
  setup_circle_ci
end

lane :increase_version_code do |options|
  latest_release = firebase_app_distribution_get_latest_release(
    app: options[:appID],
    service_credentials_file: CREDENTIALS_PATH,
  )

  if (!latest_release.nil?)
    if (!latest_release[:releaseNotes].nil? && !latest_release[:releaseNotes][:text].nil?)
      LATEST_RELEASE_NOTE = latest_release[:releaseNotes][:text]
    end

    if (!latest_release[:buildVersion].nil?)
      LATEST_VERSION_CODE = latest_release[:buildVersion].to_s

      # Increase Version Code
      currentVersion = latest_release[:buildVersion].to_i
      NEW_VERSION_CODE = currentVersion + 1
    end

    if (!latest_release[:displayVersion].nil?)
      LATEST_VERSION_NAME = latest_release[:displayVersion]
    end

    puts "<-------------------------------------------------------------------------------------->"
    puts "\n Latest Version code: #{LATEST_VERSION_CODE} \n Latest Version Name: #{LATEST_VERSION_NAME} \n Latest Release note: #{LATEST_RELEASE_NOTE} \n New Version code: #{NEW_VERSION_CODE} "
    puts "<-------------------------------------------------------------------------------------->"
  end
end

lane :distribute_to_firebase do |options|
  firebase_app_distribution(
    app: options[:appID],
    service_credentials_file: CREDENTIALS_PATH,
    android_artifact_type: ANDROID_ARTIFACT_TYPE,
    android_artifact_path: ANDROID_ARTIFACT_PATH,
    groups: TESTER_GROUP,
    release_notes_file: NEW_RELEASE_NOTE_PATH,
  )
end
factsss = []

lane :read_release_notes do

  factsss.push({
    "name" => "App Info:",
    "value" => "#{NEW_VERSION_NAME} #{NEW_VERSION_CODE}",
  })

  if(!NEW_RELEASE_NOTE_PATH.nil? && !NEW_RELEASE_NOTE_PATH.empty? )
    myFile = File.open(NEW_RELEASE_NOTE_PATH.split("/")[1], "r")

    count = 0
    while (line = myFile.gets)
      if count == 0
        factsss.push({
          "name" => "Release notes:",
          "value" => line,
        })
      else
        factsss.push({
          "name" => "",
          "value" => line,
        })
      end
      count += 1
    end
    myFile.close()
  end  
end

lane :notify_to_teams do
  read_release_notes()
  teams(
    title: "Android To The Moon",
    message: " ",
    facts: factsss,
    teams_url: WEB_HOOK_TEAMS_URL,
  )
end

lane :dev_env do
  increase_version_code(
    appID: APP_ID_DEV,
  )
  NEW_RELEASE_NOTE_PATH = RELEASE_NOTE_DEV_PATH
  NEW_VERSION_NAME = "DEV"

  # gradle(task: "clean")

  gradle(
    properties: {
      "versionCode" => NEW_VERSION_CODE,
      "versionName" => NEW_VERSION_NAME,
    # ...
    },
    task: "assemble",
    build_type: "DevDebug",
  )

  distribute_to_firebase(
    appID: APP_ID_DEV,
  )
  notify_to_teams()
  # ...
end

lane :pro_env do
  increase_version_code(
    appID: APP_ID_PRO,
  )
  NEW_RELEASE_NOTE_PATH = RELEASE_NOTE_PRO_PATH
  NEW_VERSION_NAME = "PROD"

  # gradle(task: "clean")

  gradle(
    properties: {
      "versionCode" => NEW_VERSION_CODE,
      "versionName" => NEW_VERSION_NAME,
    # ...
    },
    task: "assemble",
    build_type: "ProRelease",
  )

  distribute_to_firebase(
    appID: APP_ID_PRO,
  )

  notify_to_teams()
  # ...
end

lane :uat_env do
  increase_version_code()

  gradle(task: "clean")

  gradle(
    properties: {
      "versionCode" => NEW_VERSION_CODE,
      "versionName" => "UAT",
    # ...
    },
    task: "assemble",
    build_type: "UatDebug",
  )

  distribute_to_firebase(
    appID: APP_ID_DEV,
  )
  # ...
end

# lane :read_release_app_info do
#   myFile = File.open("release_app_info.txt", "r")

#   value = ""

#   while (line = myFile.gets)
#     value += line + " "
#   end

#   factsss.push({
#     "type": "TextBlock",
#     "size": "Medium",
#     "weight": "Bolder",
#     "text": value,
#     "wrap": true,
#     "style": "heading",
#     "fontType": "Monospace",
#     "color": "Dark",
#     "isSubtle": false,
#   })
# end

# lane :read_release_note do
#   myFile = File.open("release_note.txt", "r")

#   factsss.push({
#     "type": "TextBlock",
#     "text": "Release notes:",
#     "wrap": true,
#     "fontType": "Monospace",
#     "size": "Default",
#     "weight": "Default",
#     "color": "Dark",
#   })

#   while (line = myFile.gets)
#     factsss.push({
#       "type": "TextBlock",
#       "text": line,
#       "wrap": true,
#       "fontType": "Monospace",
#       "size": "Default",
#       "weight": "Default",
#       "color": "Dark",
#     })
#   end
# end

# require "uri"
# require "net/http"

#

# lane :request_api do
#   payload = {
#     "type": "message",
#     "attachments": [
#       {
#         "contentType": "application/vnd.microsoft.card.adaptive",
#         "contentUrl": "",
#         "content": {
#           "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
#           "type": "AdaptiveCard",
#           "version": "1.2",
#           "body": factsss,
#         },
#       },
#     ],
#   }

#   json_headers = { "Content-Type" => "application/json" }
#   uri = URI.parse(webhookUrl)
#   http = Net::HTTP.new(uri.host, uri.port)
#   http.use_ssl = true
#   response = http.post(uri.path, payload.to_json, json_headers)

#   puts "code #{response.code} #{response.body}"
# end

# lane :nghiaa do
#   read_release_app_info()
#   read_release_note()
#   request_api()
#   # teams_url = webhookUrl
#   # teams(
#   #   title: " ",
#   #   message: "",
#   #   facts:factsss,
#   #   teams_url: teams_url
#   # )
# end

# after_all do |lane|
#  nghiaa()
# end
